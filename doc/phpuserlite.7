.TH PHPUSERLITE 7 2012-12-03 "Copyright Joey Sabey" "PHP Programmer's Manual"
.SH NAME
phpuserlite \- provides oo user functionality to php
.\" +------------------+
.\" | CONTENTS SECTION |
.\" +------------------+
.SH CONTENTS
This documentation is divided into a number of sections, each
providing detailed information about an aspect of
.IR phpuserlite .
.br
Sections in this manual are:
.in +2n
.B INTRODUCTION
.br
.B CONFIGURATION
.br
.B STATIC METHODS
.br
.B INSTANCE METHODS
.br
.B EXCEPTIONS
.br
.\".B NOTES
.\".br
.B BUGS
.br
.\".B EXAMPLE
.\".br
.\".B SEE ALSO
.\".br
.\".B COLOPHON
.\" +----------------------+
.\" | INTRODUCTION SECTION |
.\" +----------------------+
.SH INTRODUCTION
.I phpuserlite
is a PHP module designed to provide the basis for websites
requiring a user login & management system, using an
.I SQLite
database throughout to store its data, and with a focus on
security
.\" +-----------------------+
.\" | CONFIGURATION SECTION |
.\" +-----------------------+
.SH CONFIGURATION
.I phpuserlite
can be configured by changing a number of class constants in the
.B User
class. These constants can be found at the top of the class
declaration. For the most part these settings can be left as
their default values and
.I phpuserlite
will work fine, with the exception of
.IR DB_PATH ,
.RI "the " "CONFIRM_*" " constants,"
.RI "and the " "SET_EMAIL_CONFIRM_*" " constants."
Following is a complete list of the configuration constants
available to you
.\" const User::DB_PATH
.SS DB_PATH
You should set this constant to the fully qualified path to the
.I SQLite
database file you want
.I phpuserlite
to use. The default value is the path to the database used to
develop and test
.I phpuserlite
.\" const User::SALT_LENGTH
.SS SALT_LENGTH
This is the number of bytes of random data used to salt data
that is hashed by
.IR phpuserlite .
The default value is
.IR 16 ,
which should be sufficient, so you probably do not need to alter
this
.\" const User::SESSION_KEY_LENGTH
.SS SESSION_KEY_LENGTH
This is the number of bytes of random data that is used to
generate the session keys used in login cookies. The default
value is
.IR 32 ,
which should be sufficient, so you probably do not need to
alter this
.\" const User::CONFIRM_CODE_LENGTH
.SS CONFIRM_CODE_LENGTH
This is the number of bytes of random data that is used to
generate the confirmation codes sent to users to confirm
registration and change of email. The default value is
.IR 16 ,
which should be sufficient, so you probably do not need to
alter this
.\" const User::HASH_ALGORITHM
.SS HASH_ALGORITHM
This is the hashing algorithm that
.I phpuserlite
uses throughout, with the exception of
.BR generateConfirmCode (),
which uses
.I sha1
for brevity. The default value is
.IR sha512 ,
but if you wish to use another hashing algorithm, you may
set this to any algorithm available to the php
.IR hash ()
function
.\" const User::HASH_ITERATIONS
.SS HASH_ITERATIONS
This is the number of times a password is passed through 
.B HASH_ALGORITHM
before being stored in, or checked against, the database.
The default value is
.IR 256 ,
which should be sufficient, so you probably do not need to
alter this
.\" const User::USERNAME_REGEX
.SS USERNAME_REGEX
This defines the prototype that all usernames of users managed
by
.I phpuserlite
must conform to.
.I phpuserlite
will refuse to register users who wish to register with
usernames that do not conform to this regex, and will ask
them to enter another username. The default value is
.I /^\[rs]w{4,32}$/
.\" const User::PASSWORD_REGEX
.SS PASSWORD_REGEX
This defines the prototype that all passwords of users managed
by
.I phpuserlite
must conform to.
.I phpuserlite
will refuse to register users who wish to register with
passwords that do not conform to this regex, and will ask
them to enter another password. The default value is
.IR /^.{6,128}$/ .
It is recommended that you only modify the minimum and maximum
characters, and then that you only increase them
.\" const User::EMAIL_REGEX
.SS EMAIL_REGEX
This is the regex used to attempt to assure that all users are
registered with a valid email address. The default value is
.IR /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i ,
which you should only change if are sure it will continue to
work, or if you wish to be more strict on who can register
.\" const User::COOKIE_SESSION_LENGTH
.SS COOKIE_SESSION_LENGTH
This is the time in seconds before a login session cookie will
expire, thus the amount of time a user will stay logged in
unless they logout manually. The default value is
.IR 604800 ,
which equates to 7 days
.\" const User::COOKIE_PATH
.SS COOKIE_PATH
This is the value that will be used for the path attribure of
all cookies issued by
.IR phpuserlite .
The default value is an empty string
.\" const User::COOKIE_DOMAIN
.SS COOKIE_DOMAIN
This is the value that will be used for the domain attribute of
all cookies issued by
.IR phpuserlite .
The default value is an empty string
.\" const User::LOGIN_FORM_TEMPLATE
.SS LOGIN_FORM_TEMPLATE
This is the template used by
.I phpuserlite
to generate login forms. When modifying this template, pay
attention to the
.IR [form_action] ", " [error] " & " [username]
placeholders, they are used to inject information into the
template
.\" const User::LOGIN_SUCCESS_TEMPLATE
.SS LOGIN_SUCCESS_TEMPLATE
This is the template used by
.I phpuserlite
to report a successful login. When modifying this template
pay attention to the
.I [username]
placeholder, it is used to inject the username of the user
that has logged in
.\" const User::REGISTER_FORM_TEMPLATE
.SS REGISTER_FORM_TEMPLATE
This is the template used by
.I phpuserlite
to generate registration forms. When modifying this template,
pay attention to the
.IR [form_action] ", " [error] ", " [username] " & " [email]
placeholders, they are used to inject information into the
template
.\" const User::REGISTER_SUCCESS_TEMPLATE
.SS REGISTER_SUCCESS_TEMPLATE
This is the template used by
.I phpuserlite
to report a successful registration
.\" const User::LOGIN_NO_USERNAME_ERROR
.SS LOGIN_NO_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made without a username
.\" const User::LOGIN_NO_PASSWORD_ERROR
.SS LOGIN_NO_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made without a password
.\" const User::LOGIN_NO_INPUT_ERROR
.SS LOGIN_NO_INPUT_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made without either a username or
password
.\" const User::LOGIN_INVALID_USERNAME_ERROR
.SS LOGIN_INVALID_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made with a username that does not
match against
.B USERNAME_REGEX
.\" const User::LOGIN_INVALID_PASSWORD_ERROR
.SS LOGIN_INVALID_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made with a password that does not
match against
.B PASSWORD_REGEX
.\" const User::LOGIN_NO_SUCH_USERNAME_ERROR
.SS LOGIN_NO_SUCH_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made and the username entered was
not found in the database
.\" const User::LOGIN_INCORRECT_PASSWORD_ERROR
.SS LOGIN_INCORRECT_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B LOGIN_FORM_TEMPLATE
when a login attempt is made and the password entered does
not match the password stored in the database for the
username entered
.\" const User::REGISTER_NO_USERNAME_ERROR
.SS REGISTER_NO_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made without a username
.\" const User::REGISTER_NO_PASSWORD_ERROR
.SS REGISTER_NO_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made without a password
.\" const User::REGISTER_NO_CONFIRM_PASSWORD_ERROR
.SS REGISTER_NO_CONFIRM_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made without the password
being confirmed
.\" const User::REGISTER_NO_EMAIL_ERROR
.SS REGISTER_NO_EMAIL_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made without an email
.\" const User::REGISTER_INVALID_USERNAME_ERROR
.SS REGISTER_INVALID_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made with a username that does
not match against
.B USERNAME_REGEX
.\" const User::REGISTER_INVALID_PASSWORD_ERROR
.SS REGISTER_INVALID_PASSWORD_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made with a username that does
not match against
.B PASSWORD_REGEX
.\" const User::REGISTER_INVALID_EMAIL_ERROR
.SS REGISTER_INVALID_EMAIL_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made with an email that does
not match against
.B EMAIL_REGEX
.\" const User::REGISTER_PASSWORD_MISMATCH_ERROR
.SS REGISTER_PASSWORD_MISMATCH_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made and the password does not
match the confirmation password
.\" const User::REGISTER_UNAVAILABLE_USERNAME_ERROR
.SS REGISTER_UNAVAILABLE_USERNAME_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made and the username entered
is already registered in the database
.\" const User::REGISTER_UNAVAILABLE_EMAIL_ERROR
.SS REGISTER_UNAVAILABLE_EMAIL_ERROR
This is injected into the place of the
.I [error]
placeholder in
.B REGISTER_FORM_TEMPLATE
when a registration attempt is made and the email entered is
already registered in the database
.\" const User::CONFIRM_SUBJECT
.SS CONFIRM_SUBJECT
This is the subject used in emails sent out to new users to
confirm their email address
.\" const User::CONFIRM_BODY_TEMPLATE
.SS CONFIRM_BODY_TEMPLATE
This is the template used by
.I phpuserlite
to generate the body of emails sent out to new users to confirm
their email address. When modifying this template, pay attention
to the
.IR [id] " & " [code]
placeholders, and note that the entire string
.I ?id=[id]&code=[code]
must remain intact at the end of the confirmation page file name
.\" const User::CONFIRM_FROM
.SS CONFIRM_FROM
This is the email address that emails sent out to new users to
confirm their email address will be spoofed by 
.I phpuserlite
to look like they're from
.\" const User::CONFIRM_SUCCESS_TEMPLATE
.SS CONFIRM_SUCCESS_TEMPLATE
This is the template returned by
.BR confirm ()
when it successfully confirms a new user
.\" const User::CONFIRM_INCORRECT_CODE_TEMPLATE
.SS CONFIRM_INCORRECT_CODE_TEMPLATE
This is the template returned by
.BR confirm ()
when the confirmation code in
.IR $_GET []
doesn't match the one stored in the
.I usersPending
table in the database
.\" const User::CONFIRM_NO_SUCH_ID_TEMPLATE
.SS CONFIRM_NO_SUCH_ID_TEMPLATE
This is the template returned by
.BR confirm ()
when the
.I id
in
.IR $_GET []
does not match any stored in the
.I usersPending
table in the database
.\" const User::SET_EMAIL_CONFIRM_SUBJECT
.SS SET_EMAIL_CONFIRM_SUBJECT
This is the subject used in emails sent out to users to confirm
a change of email address
.\" const User::SET_EMAIL_CONFIRM_BODY_TEMPLATE
.SS SET_EMAIL_CONFIRM_BODY_TEMPLATE
This is the template used by
.I phpuserlite
to generate the body of emails sent out to users to confirm a
change of email address. When modifying this template, pay
attention to the
.IR [id] " & " [code]
placeholders, and note that the entire string
.I ?id=[id]&code=[code]
must remain intact at the end of the confirmation page file name
.\" const User::SET_EMAIL_CONFIRM_FROM
.SS SET_EMAIL_CONFIRM_FROM
This is the email address that emails sent out to users to
confirm a change of email address will be spoofed by
.I phpuserlite
to look like they're from
.\" const User::SET_EMAIL_CONFIRM_SUCCESS_TEMPLATE
.SS SET_EMAIL_CONFIRM_SUCCESS_TEMPLATE
This is the template returned by
.BR confirmSetEmail ()
when it successfully changes a users email
.\" const User::SET_EMAIL_CONFIRM_INCORRECT_CODE_TEMPLATE
.SS SET_EMAIL_CONFIRM_INCORRECT_CODE_TEMPLATE
This is the template returned by
.BR confirmSetEmail ()
when the confirmation code in
.IR $_GET []
doesn't match the one stored in the
.I usersChangeEmail
table in the database
.\" const User::SET_EMAIL_CONFIRM_NO_SUCH_ID_TEMPLATE
.SS SET_EMAIL_CONFIRM_NO_SUCH_ID_TEMPLATE
This is the template returned by
.BR confirmSetEmail ()
when the
.I id
in
.IR $_GET []
does not match any stored in the
.I usersChangeEmail
table in the database
.\" A note on flags
.SS Flags
After these configurable constants, there are a number of other
constants labelled as
.IR flags ;
.BR GET_BY_ID ,
.BR GET_BY_USERNAME ,
.BR SET_EMAIL_CONFIRM " &"
.BR SET_EMAIL_DIRECT .
These constants are NOT for configuraton, they are for passing
to methods as flags to alter the methods behaviour, and as such
they should NOT be modified
.\" +------------------------+
.\" | STATIC METHODS SECTION |
.\" +------------------------+
.SH STATIC METHODS
The static methods in
.I phpuserlite
are used to add users to the database, display & process forms,
and perform initial setup
.\" static function User::getCurrent()
.SS getCurrent\fR()
This method attempts to identify the current logged in user by
login cookies, returning a
.B User
object on success, otherwise
.I NULL
.\" static function User::add()
.SS add\fR(\fIusername\fR, \fIpassword\fR, \fIemail\fR)
This method adds a new user into the
.I users
table of the database, provided that;
.I username
matches against
.BR USERNAME_REGEX ,
.I password
matches against
.BR PASSWORD_REGEX ,
.I email
matches against
.BR EMAIL_REGEX ,
and
.IR username " & " email
are not already in the database. This method has no return value
through might throw one of
.BR UserInvalidUsernameException ,
.BR UserInvalidPasswordException ,
.BR UserInvalidEmailException ,
.BR UserUnavailableUsernameException ,
.BR UserUnavailableEmailException
if there is an error. Note that this method does not pass through
email verification, so should be used sparingly
.\" static function User::addPending()
.SS addPending\fR(\fIusername\fR, \fIpassword\fR, \fIemail\fR)
This method adds a new user into the
.I usersPending
table of the database and sends out a confirmation email to
.I email
generated from the
.BR CONFIRM_SUBJECT ", " CONFIRM_BODY_TEMPLATE " & " CONFIRM_FROM
constants, provided that;
.I username
matches against
.BR USERNAME_REGEX ,
.I password
matches against
.BR PASSWORD_REGEX ,
.I email
matches against
.BR EMAIL_REGEX ,
and
.IR username " & " email
are not already in the database. This method has no return value
though might throw one of
.BR UserInvalidUsernameException ,
.BR UserInvalidPasswordException ,
.BR UserInvalidEmailException ,
.BR UserUnavailableUsernameException ,
.BR UserUnavailableEmailException
if there is an error. Note that there must be a page set up with
the
.BR confirm ()
method to verify that
.I email
exists and is owned by the user for the data to be tranfered to
the
.I users
table in the database, activating the user and allowing them to
log in
.\" static function User::confirm()
.SS confirm\fR()
This method processes a confirmation code, as emailed out to new
users by
.BR addPending (),
transfering the relevant user from the
.I usersPending
to the
.I users
table in the database. The return value is always a string
containing 
.B CONFIRM_SUCCESS_TEMPLATE
on success or one of
.BR CONFIRM_INCORRECT_CODE_TEMPLATE ", " CONFIRM_NO_SUCH_ID_TEMPLATE
on failure, to be displayed to the user
.\" static function User::confirmSetEmail()
.SS confirmSetEmail\fR()
This method processes a change of email confirmation code, as
emailed out to users by
.BR setEmail ()
when called with the
.B SET_EMAIL_CONFIRM
flag, transfering the relevant email address from the
.I usersChangeEmail
table to the corresponding user entry in the
.I users
table in the database. The return value is always a string
containing a message of success or failure to be displayed to
the user
.\" static function User::login()
.SS login\fR()
This method is used to generate & process login forms, and will
behave differently if called in different contexts, but the
return value is always a
.IR string .
If it is called without a login attempt in
.IR $_POST []
it will generate and return a login form from
.BR LOGIN_FORM_TEMPLATE ,
injecting only into the
.I [form_action]
placeholder. If it is called with a login attempt in
.IR $_POST []
and the login is unsuccessful it will generate a login form from
.BR LOGIN_FORM_TEMPLATE ,
injecting into the
.IR [form_action ", " [error] " & possibly " [username]
placeholders. If it is called with a login attempt in
.IR $_POST []
and the login is successful it will generate and return a success
message from
.BR LOGIN_SUCCESS_TEMPLATE .
Note that this method must be called before any output as it
needs to set cookies
.\" static function User::register()
.SS register\fR()
This method is used to generate & process registration forms,
and will behave differently if called in different contexts, but
the return value is always a
.IR string .
If it is called without a registration attempt in
.IR $_POST []
it will generate and return a registration form from
.BR REGISTER_FORM_TEMPLATE ,
injecting only into the
.I [form_action]
placeholder. If it is called with a registration attempt in
.IR $_POST []
and the registration is unsuccessful it will generate and return
a registration form from
.BR REGISTER_FORM_TEMPLATE ,
injecting to the
.IR [form_action] ", " [error]
& possibly
.IR [username] " and/or " [email]
placeholders. If it is called with a registration attempt in
.IR $_POST []
and the registration is successful it will add a new user to the
.I usersPending
table in the database, send out a confirmation email and
generate and return a success message from
.B REGISTER_SUCCESS_TEMPLATE
.\" static function User::setupDB()
.SS setupDB\fR()
This method must be called after you set
.B DB_PATH ,
but before you attempt to call any methods or create any
.B User
objects. You only need to call this once, unless you delete or
move the database, or alter
.BR DB_PATH ,
and wish to recreate the database from scratch
.\" +--------------------------+
.\" | INSTANCE METHODS SECTION |
.\" +--------------------------+
.SH INSTANCE METHODS
.\" User class constructor
.SS Constructor\fR(\fIuid\fR, \fIgetType\fR)
The class constructor for
.B User
treats
.I uid
differently depending on the value of
.IR getType ,
which can be one of the flags
.BR GET_BY_ID " or " GET_BY_USERNAME .
If
.I getType
is set to
.B GET_BY_ID
then the constructor looks for a user in the
.I users
table in the database where
.I id
matches
.I uid
and creates a
.B User
object if it finds one, otherwise it throws an
.IR OutOfBoundsException .
If
.I getType
is set to
.B GET_BY_USERNAME
then the constructor looks for a user in the
.I users
table in the database where
.I username
matches
.I uid
and creates a
.B User
object if it finds one, otherwise it throws an
.IR OutOfBoundsException .
The constructor may also throw one of
.I InvalidArgumentException
or
.B UserInvalidUsernameException
if
.I uid
is invalid
.\" public function [user-object]->getID()
.SS getID\fR()
This method returns the
.I id
of the user
.\" public function [user-object]->getUsername()
.SS getUsername\fR()
This method returns the
.I username
of the user
.\" public function [user-object]->getPassword()
.SS getPassword\fR()
This method returns the
.I password
of the user, as stored in the
.I users
table in the database; salted and hashed by
.BR HASH_ALGORITHM ", " HASH_ITERATIONS
times
.\" public function [user-object]->getSalt()
.SS getSalt\fR()
This method returns the
.I salt
data used to salt the users password
.\" public function [user-object]->getEmail()
.SS getEmail\fR()
This method returns the
.I email
of the user
.\" public function [user-object]->getDate()
.SS getDate\fR()
This method returns the date that the user was registered in the
database
.\" public function [user-object]->getSessionKey()
.SS getSessionKey\fR()
This method returns the
.I sessionKey
of the user if they are currently logged in, otherwise it will
return
.I NULL
.\" public function [user-object]->getSessionIP()
.SS getSessionIP\fR()
This method returns the
.I sessionIP
of the user if they are currently logged in, otherwise it will
return
.I NULL
.\" public function [user-object]->setUsername()
.SS setUsername\fR(\fIusername\fR)
This method sets the username of the user to
.IR username ,
provided it matches against
.BR USERNAME_REGEX ,
and does not clash with any username already in the database. If
.I username
does not match against
.B USERNAME_REGEX
it will throw a
.BR UserInvalidUsernameException .
If
.I username
clashes with a username already in the database it will throw a
.B UserUnavailableUsernameException
.\" public function [user-object]->setPassword()
.SS setPassword\fR(\fIpassword\fR)
This method sets the username of the user to
.IR password ,
provided it matches against
.BR PASSWORD_REGEX .
If
.I password
does not match against
.B PASSWORD_REGEX
it will throw a
.B UserInvalidPasswordException
.\" public function [user-object]->setEmail()
.SS setEmail\fR(\fIemail\fR, \fImode\fR)
This method sets the email of the user to
.IR email ,
provided it matches against
.BR EMAIL_REGEX ,
and does not clash with any email already in the database. If
.I email
does not match against
.B EMAIL_REGEX
it will throw a
.BR UserInvalidEmailException .
If
.I email
clashes with an email already in the database it will throw a
.B UserUnavailableEmailException
.\" public function [user-object]->checkPassword()
.SS checkPassword\fR(\fIpassword\fR)
This method checks to see if
.I password
matches the password of the user, returning
.I true
if they match or
.I false
if they do not match
.\" public function [user-object]->startSession()
.SS startSession\fR()
This method logs a user in, generating a new
.IR sessionKey " & " sessionIP ,
saving them in the database and sending out session cookies.
Note that this method must be called before any output as it
needs to set cookies
.\" public function [user-object]->checkSession()
.SS checkSession\fR(\fIsessionKey\fR)
This method checks to see if the user is logged in by checking
.I sessionKey
against the session key in the database, along with checking
.IR $_SERVER [' REMOTE_ADDR ']
against the session IP stored in the database. It returns
.I true
if they match, or
.I false
if they do not match
.\" public function [user-object]->endSession()
.SS endSession\fR()
This method clears all of the cookies issued by
.I phpuserlite
and clears the
.IR sessionKey " & " sessionIP
data from the
.B User
object and corresponding data in the
.I users
table of the database. This is probably the best and easiest way
to implement a logout page. Note that this method must be called
before any output as it needs to set cookies
.\" public function [user-object]->remove()
.SS remove\fR()
This method deletes the user's entry from the database
.\" +--------------------+
.\" | EXCEPTIONS SECTION |
.\" +--------------------+
.SH EXCEPTIONS
.\" class UserInvalidUsernameException extends InvalidArgumentException
.SS UserInvalidUsernameException
This exception extends
.IR InvalidArgumentException ,
and is thrown by methods that are passed a username that does
not match against
.B USERNAME_REGEX
.\" class UserInvalidPasswordException extends InvalidArgumentException
.SS UserInvalidPasswordException
This exception extends
.IR InvalidArgumentException ,
and is thrown by methods that are passed a password that does
not match against
.B PASSWORD_REGEX
.\" class UserInvalidEmailException extends InvalidArgumentException
.SS UserInvalidEmailException
This exception extends
.IR InvalidArgumentException ,
and is thrown by methods that are passed an email that does not
match against
.B EMAIL_REGEX
.\" class UserUnavailableUsernameException extends InvalidArgumentException
.SS UserUnavailableUsernameException
This exception extends
.IR InvalidArgumentException ,
and is thrown by methods that either add users to the database,
or change the username of those already in the database, if they
are passed a username already in the database
.\" class UserUnavailableEmailException extends InvalidArgumentException
.SS UserUnavailableEmailException
This exception extends
.IR InvalidArgumentException ,
and is thrown by methods that either add users to the database,
or change the email of those already in the database, if they are
passed an email already in the database
.\" +---------------+
.\" | NOTES SECTION |
.\" +---------------+
.\".SH NOTES
.\" +--------------+
.\" | BUGS SECTION |
.\" +--------------+
.SH BUGS
There are no known bugs with
.IR phpuserlite ,
though this is, of course, not the same thing as there being no
bugs. Please direct all bug reports to the bug tracker at
http://code.google.com/p/phpuserlite/
.\" +--------------------+
.\" | EXAMPLE(S) SECTION |
.\" +--------------------+
.\".SH EXAMPLE
.\" +------------------+
.\" | SEE ALSO SECTION |
.\" +------------------+
.\".SH SEE ALSO
.\" +------------------+
.\" | COLOPHON SECTION |
.\" +------------------+
.\".SH COLOPHON..?

